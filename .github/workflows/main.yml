permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

name: CI/CD Pipeline for C#

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - run: dotnet test ./test/test.csproj --configuration Release --logger trx --results-directory TestResults
      - name: Add test-passed label
        if: success() && github.event_name == 'pull_request'
        uses: studroid/label-pr-or-issue-action@v1
        with:
          label: "test-passed"
          github-token: ${{ secrets.GITHUB_TOKEN }}

  codeql:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: csharp
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  version:
    runs-on: ubuntu-latest
    needs: [test, codeql]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
  
      - name: Create version file if not exists
        run: |
          if [ ! -f version ]; then
            echo "1.0.0" > version
          fi
  
      - name: List files in workspace
        run: ls -l
  
      - name: Get current version
        id: version
        run: |
          VERSION=$(cat version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
  
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version



  docker:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            smdmbsht/ci-cd:${{ needs.version.outputs.version }}
            smdmbsht/ci-cd:latest

  changelog:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - name: Create changelog if not exists
        run: |
          if [ ! -f changelog.md ]; then
            echo "# Changelog" > changelog.md
            echo "" >> changelog.md
            echo "## [${{ needs.version.outputs.version }}] - $(date +%Y-%m-%d)" >> changelog.md
            echo "- Initial release" >> changelog.md
          fi
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md


  notify:
    runs-on: ubuntu-latest
    needs: [docker, changelog, version]
    steps:
      - uses: actions/checkout@v4
      - name: Download changelog artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ ${{ needs.version.outputs.version }}
            
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            –í–µ—Ç–∫–∞: ${{ github.ref }}
            –ö–æ–º–º–∏—Ç: ${{ github.sha }}
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          document: changelog.md

  tag:
    runs-on: ubuntu-latest
    needs: notify
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Set up git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump patch version, commit and push
        id: bump_version
        run: |
          version=$(cat version)
          # –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ —á–∞—Å—Ç–∏
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          new_version="${major}.${minor}.${patch}"
          echo "$new_version" > version
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          git add version
          git commit -m "Bump version to $new_version [ci skip]"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version="${{ steps.bump_version.outputs.new_version }}"
          tag="v$new_version"
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists. Skipping."
            exit 0
          fi
          git tag "$tag"
          git push origin "$tag"




  release:
    runs-on: ubuntu-latest
    needs: tag
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


